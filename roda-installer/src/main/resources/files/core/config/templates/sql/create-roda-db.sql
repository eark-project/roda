
CREATE DATABASE RODADATA_MYSQL_DB;

GRANT ALL ON RODADATA_MYSQL_DB.* TO 'roda-core'@'localhost' IDENTIFIED BY 'RODADATA_MYSQL_RODACORE_PASSWD';
GRANT ALL ON RODADATA_MYSQL_DB.* to 'roda-core'@'%' IDENTIFIED BY 'RODADATA_MYSQL_RODACORE_PASSWD';

USE RODADATA_MYSQL_DB;

-- Logger tables

DROP TABLE IF EXISTS LogParameters;

DROP TABLE IF EXISTS Logs_id;
DROP TABLE IF EXISTS Logs;

CREATE TABLE Logs_id (
	id	BIGINT NOT NULL,

	PRIMARY KEY (id)
);

INSERT INTO Logs_id(id) VALUES (0);

CREATE TABLE Logs (
	id		VARCHAR(500) NOT NULL,
	address		VARCHAR(500) NULL DEFAULT NULL,
	datetime	TIMESTAMP NOT NULL,
	username	VARCHAR(500) NOT NULL,
	action		VARCHAR(500) NOT NULL,
	description	TEXT NULL DEFAULT NULL,
	object		VARCHAR(500) NULL DEFAULT NULL,
	duration	NUMERIC NULL DEFAULT NULL,

	PRIMARY KEY (id)
);

CREATE TABLE LogParameters (
	Logs_id		VARCHAR(500) NOT NULL,
	position	NUMERIC NOT NULL,
	name		VARCHAR(500) NOT NULL,
	value		TEXT NULL DEFAULT NULL,

	PRIMARY KEY (Logs_id, position),
	FOREIGN KEY (Logs_id) REFERENCES Logs(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Ingest tables

DROP TABLE IF EXISTS SIPStateTransitions;

DROP TABLE IF EXISTS SIPs_id;
DROP TABLE IF EXISTS SIPs;

CREATE TABLE SIPs_id (
	id	BIGINT NOT NULL,

	PRIMARY KEY (id)
);

INSERT INTO SIPs_id(id) VALUES (0);

CREATE TABLE SIPs (
	id			VARCHAR(500) NOT NULL,
	username		VARCHAR(500) NOT NULL,
	original_filename	VARCHAR(500) NOT NULL,
	state			VARCHAR(500) NULL DEFAULT NULL,
	complete		BOOLEAN DEFAULT false NOT NULL,
	percentage		NUMERIC DEFAULT 0 NOT NULL,
	pid			VARCHAR(500) NULL DEFAULT NULL,
	parent_pid		VARCHAR(500) NULL DEFAULT NULL,
	datetime		TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	processing		BOOLEAN DEFAULT false NOT NULL,

	PRIMARY KEY (id)
);

CREATE TABLE SIPStateTransitions (
	SIPs_id		VARCHAR(500) NOT NULL,
	from_state	VARCHAR(500) NULL DEFAULT NULL,
	to_state	VARCHAR(500) NOT NULL,
	datetime	TIMESTAMP NOT NULL,
	task_id		VARCHAR(500) NULL DEFAULT NULL,
	success		BOOLEAN DEFAULT false NOT NULL,
	description	TEXT NULL DEFAULT NULL,

	PRIMARY KEY (SIPs_id, to_state),
	FOREIGN KEY (SIPs_id) REFERENCES SIPs(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Reports tables

DROP TABLE IF EXISTS ReportItemAttributes;
DROP TABLE IF EXISTS ReportItems;

DROP TABLE IF EXISTS ReportAttributes;

DROP TABLE IF EXISTS Reports_id;
DROP TABLE IF EXISTS Reports;

CREATE TABLE Reports_id (
	id	BIGINT NOT NULL,

	PRIMARY KEY (id)
);

INSERT INTO Reports_id(id) VALUES (0);

CREATE TABLE Reports (
	id	VARCHAR(500) NOT NULL,
	type	VARCHAR(500) NOT NULL,
	title	TEXT NULL DEFAULT NULL,

	PRIMARY KEY (id)
);

CREATE TABLE ReportAttributes (
	Reports_id	VARCHAR(500) NOT NULL,
	name		VARCHAR(500) NOT NULL,
	value		TEXT NULL DEFAULT NULL,

	PRIMARY KEY (Reports_id, name),
	FOREIGN KEY (Reports_id) REFERENCES Reports(id) 
		ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE ReportItems (
	Reports_id	VARCHAR(500) NOT NULL,
	position	BIGINT NOT NULL,
	title		VARCHAR(500) NULL DEFAULT NULL,

	PRIMARY KEY (Reports_id, position),
	FOREIGN KEY (Reports_id) REFERENCES Reports(id) 
		ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE ReportItemAttributes (
	Reports_id		VARCHAR(500) NOT NULL,
	ReportItems_position	BIGINT NOT NULL,
	name			VARCHAR(256) NOT NULL,
	value			TEXT NULL DEFAULT NULL,

	PRIMARY KEY (Reports_id, ReportItems_position, name),
	FOREIGN KEY (Reports_id, ReportItems_position) REFERENCES ReportItems(Reports_id, position) 
		ON UPDATE CASCADE ON DELETE CASCADE
);

-- Scheduler tables

DROP TABLE IF EXISTS TaskInstanceParameters;

DROP TABLE IF EXISTS TaskInstances_id;
DROP TABLE IF EXISTS TaskInstances;

CREATE TABLE TaskInstances_id (
	id	BIGINT NOT NULL,

	PRIMARY KEY (id)
);

INSERT INTO TaskInstances_id(id) VALUES (0);

CREATE TABLE TaskInstances (
	id			VARCHAR(500) NOT NULL,
	name			VARCHAR(500) NOT NULL,
	description		TEXT NULL DEFAULT NULL,
	username		VARCHAR(500) NOT NULL,
	state			VARCHAR(500) NOT NULL,
	completePercentage	FLOAT NOT NULL,
	startDate		TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	finishDate		TIMESTAMP NULL DEFAULT NULL,
	report			VARCHAR(500) NULL DEFAULT NULL,

	plugin_id		VARCHAR(500) NOT NULL,
	plugin_name		VARCHAR(500) NOT NULL,
	plugin_version		FLOAT NOT NULL,
	plugin_description	TEXT NULL DEFAULT NULL,

	PRIMARY KEY (id)
);

CREATE TABLE TaskInstanceParameters (
	TaskInstances_id	VARCHAR(500) NOT NULL,
	name			VARCHAR(500) NOT NULL,
	type			VARCHAR(500) NOT NULL,
	value			TEXT NULL DEFAULT NULL,
	mandatory		BOOLEAN DEFAULT true NOT NULL,
	readonly		BOOLEAN DEFAULT false NOT NULL,
	description		TEXT NULL DEFAULT NULL,

	PRIMARY KEY (TaskInstances_id,name),
	FOREIGN KEY (TaskInstances_id) REFERENCES TaskInstances(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Statistics tables

DROP TABLE IF EXISTS StatisticData;

CREATE TABLE StatisticData (
	datetime	TIMESTAMP NOT NULL,
	type		VARCHAR(500) NOT NULL,
	value		TEXT NULL DEFAULT NULL,

	PRIMARY KEY (datetime, type)
);

-- Quartz tables

DROP TABLE IF EXISTS QRTZ_JOB_LISTENERS;
DROP TABLE IF EXISTS QRTZ_TRIGGER_LISTENERS;
DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;


CREATE TABLE QRTZ_JOB_DETAILS
  (
    JOB_NAME  VARCHAR(80) NOT NULL,
    JOB_GROUP VARCHAR(80) NOT NULL,
    DESCRIPTION VARCHAR(120) NULL,
    JOB_CLASS_NAME   VARCHAR(128) NOT NULL,
    IS_DURABLE VARCHAR(1) NOT NULL,
    IS_VOLATILE VARCHAR(1) NOT NULL,
    IS_STATEFUL VARCHAR(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_JOB_LISTENERS
  (
    JOB_NAME  VARCHAR(80) NOT NULL,
    JOB_GROUP VARCHAR(80) NOT NULL,
    JOB_LISTENER VARCHAR(80) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    JOB_NAME  VARCHAR(80) NOT NULL,
    JOB_GROUP VARCHAR(80) NOT NULL,
    IS_VOLATILE VARCHAR(1) NOT NULL,
    DESCRIPTION VARCHAR(120) NULL,
    NEXT_FIRE_TIME BIGINT(13) NULL,
    PREV_FIRE_TIME BIGINT(13) NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT(13) NOT NULL,
    END_TIME BIGINT(13) NULL,
    CALENDAR_NAME VARCHAR(80) NULL,
    MISFIRE_INSTR SMALLINT(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    REPEAT_COUNT BIGINT(7) NOT NULL,
    REPEAT_INTERVAL BIGINT(12) NOT NULL,
    TIMES_TRIGGERED BIGINT(7) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CRON_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    CRON_EXPRESSION VARCHAR(80) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_BLOB_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_TRIGGER_LISTENERS
  (
    TRIGGER_NAME  VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    TRIGGER_LISTENER VARCHAR(80) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);


CREATE TABLE QRTZ_CALENDARS
  (
    CALENDAR_NAME  VARCHAR(80) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);



CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
  (
    TRIGGER_GROUP  VARCHAR(80) NOT NULL, 
    PRIMARY KEY (TRIGGER_GROUP)
);

CREATE TABLE QRTZ_FIRED_TRIGGERS
  (
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    IS_VOLATILE VARCHAR(1) NOT NULL,
    INSTANCE_NAME VARCHAR(80) NOT NULL,
    FIRED_TIME BIGINT(13) NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(80) NULL,
    JOB_GROUP VARCHAR(80) NULL,
    IS_STATEFUL VARCHAR(1) NULL,
    REQUESTS_RECOVERY VARCHAR(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);

CREATE TABLE QRTZ_SCHEDULER_STATE
  (
    INSTANCE_NAME VARCHAR(80) NOT NULL,
    LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
    CHECKIN_INTERVAL BIGINT(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);

CREATE TABLE QRTZ_LOCKS
  (
    LOCK_NAME  VARCHAR(40) NOT NULL, 
    PRIMARY KEY (LOCK_NAME)
);


INSERT INTO QRTZ_LOCKS values('TRIGGER_ACCESS');
INSERT INTO QRTZ_LOCKS values('JOB_ACCESS');
INSERT INTO QRTZ_LOCKS values('CALENDAR_ACCESS');
INSERT INTO QRTZ_LOCKS values('STATE_ACCESS');
INSERT INTO QRTZ_LOCKS values('MISFIRE_ACCESS');

